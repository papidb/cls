// code was generated by claude and gpt
import { scaleQuantize } from "d3-scale";
import { memo, useMemo, useState } from "react";
import {
  ComposableMap,
  Geographies,
  Geography,
  ZoomableGroup,
} from "react-simple-maps";
import world110m from "src/lib/110m.json";
import { feature } from "topojson-client";

interface TrafficMapProps {
  trafficByCountry: Record<string, number>; // ISO-A3 -> value
}

const geos = feature(world110m as any, (world110m as any).objects.countries);
const hoverFill = "oklch(from var(--accent) l c h / 0.95)"; // tweak tokens if you want

export const TrafficMap = memo(function TrafficMap({
  trafficByCountry,
}: TrafficMapProps) {
  const values = Object.values(trafficByCountry);
  const max = values.length ? Math.max(...values) : 0;

  const color = useMemo(
    () =>
      scaleQuantize<string>()
        .domain([0, max || 1])
        .range([
          "oklch(from var(--primary) l c h / 0.50)",
          "oklch(from var(--primary) l c h / 0.65)",
          "oklch(from var(--primary) l c h / 0.80)",
          "oklch(from var(--primary) l c h / 0.95)",
          "oklch(from var(--primary) l c h / 1)",
        ]),
    [max]
  );

  const [tip, setTip] = useState<{
    x: number;
    y: number;
    name: string;
    value: number;
  } | null>(null);

  return (
    <div className="w-full relative">
      <ComposableMap
        projectionConfig={{ scale: 160 }}
        style={{ width: "100%", height: "auto" }}
        className="outline-none"
      >
        <ZoomableGroup>
          <Geographies geography={geos}>
            {({ geographies }) =>
              geographies.map((geo: any) => {
                const code: string = geo.properties.a3;
                const name: string = geo.properties.name;
                const value = Number(trafficByCountry[code] || 0);
                const baseFill = color(value);

                return (
                  <Geography
                    key={geo.rsmKey}
                    geography={geo}
                    // Put colors in style.{default,hover}.fill
                    style={{
                      default: {
                        fill: baseFill,
                        stroke: "#e2e8f0",
                        strokeWidth: 0.5,
                        outline: "none",
                        transition:
                          "fill 120ms linear, stroke 120ms linear, opacity 120ms linear",
                      },
                      hover: {
                        fill: hoverFill,
                        stroke: "oklch(from var(--primary) l c h / 1)",
                        strokeWidth: 0.8,
                        outline: "none",
                        cursor: "pointer",
                      },
                      pressed: { outline: "none" },
                    }}
                    onMouseEnter={(evt) => {
                      setTip({
                        x: evt.clientX,
                        y: evt.clientY,
                        name,
                        value,
                      });
                    }}
                    onMouseMove={(evt) => {
                      setTip((t) =>
                        t ? { ...t, x: evt.clientX, y: evt.clientY } : t
                      );
                    }}
                    onMouseLeave={() => setTip(null)}
                    tabIndex={0}
                    aria-label={`${name}: ${value}`}
                    onFocus={(evt) => {
                      // keyboard focus shows the same tooltip near the element
                      const rect = (
                        evt.target as SVGPathElement
                      ).getBoundingClientRect();
                      setTip({
                        x: rect.left + rect.width / 2,
                        y: rect.top,
                        name,
                        value,
                      });
                    }}
                    onBlur={() => setTip(null)}
                  />
                );
              })
            }
          </Geographies>
        </ZoomableGroup>
      </ComposableMap>

      {/* Tiny tooltip */}
      {tip ? (
        <div
          style={{
            position: "fixed",
            left: tip.x + 12,
            top: tip.y + 12,
            pointerEvents: "none",
            zIndex: 50,
            background: "oklch(from var(--popover) l c h / 0.95)",
            color: "var(--popover-foreground)",
            border: "1px solid var(--border)",
            borderRadius: 6,
            padding: "6px 8px",
            boxShadow: "0 4px 12px oklch(from var(--ring) l c h / 0.25)",
            fontSize: 12,
            lineHeight: 1.2,
            whiteSpace: "nowrap",
          }}
        >
          <div style={{ fontWeight: 600 }}>{tip.name}</div>
          <div>{tip.value.toLocaleString()}</div>
        </div>
      ) : null}
    </div>
  );
});
