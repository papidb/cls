/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as SlugRouteImport } from './routes/$slug'
import { Route as IndexRouteImport } from './routes/index'
import { Route as LinksLinkIdRouteImport } from './routes/links/$linkId'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const SlugRoute = SlugRouteImport.update({
  id: '/$slug',
  path: '/$slug',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const LinksLinkIdRoute = LinksLinkIdRouteImport.update({
  id: '/links/$linkId',
  path: '/links/$linkId',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$slug': typeof SlugRoute
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/links/$linkId': typeof LinksLinkIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$slug': typeof SlugRoute
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/links/$linkId': typeof LinksLinkIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/$slug': typeof SlugRoute
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/links/$linkId': typeof LinksLinkIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/$slug' | '/dashboard' | '/login' | '/links/$linkId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/$slug' | '/dashboard' | '/login' | '/links/$linkId'
  id: '__root__' | '/' | '/$slug' | '/dashboard' | '/login' | '/links/$linkId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  SlugRoute: typeof SlugRoute
  DashboardRoute: typeof DashboardRoute
  LoginRoute: typeof LoginRoute
  LinksLinkIdRoute: typeof LinksLinkIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$slug': {
      id: '/$slug'
      path: '/$slug'
      fullPath: '/$slug'
      preLoaderRoute: typeof SlugRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/links/$linkId': {
      id: '/links/$linkId'
      path: '/links/$linkId'
      fullPath: '/links/$linkId'
      preLoaderRoute: typeof LinksLinkIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SlugRoute: SlugRoute,
  DashboardRoute: DashboardRoute,
  LoginRoute: LoginRoute,
  LinksLinkIdRoute: LinksLinkIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
